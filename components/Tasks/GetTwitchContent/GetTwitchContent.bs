sub main()
    if m.top.contentRequested.contentType = "CLIP"
        content = CreateObject("roSGNode", "TwitchContentNode")
        content.setFields(m.top.contentRequested)
        content.url = Left(m.top.contentRequested.previewImageUrl, Len(m.top.contentRequested.previewImageUrl) - 20) + ".mp4"
        content.StreamUrls = [content.url]
        content.streamQualities = ["HD"]
        content.streamContentIds = ["Original"]
    else
        if m.top.contentRequested.contentType = "VOD"
            rsp = TwitchGraphQLRequest({
                query: `query VodPlayerWrapper_Query(
            $videoId: ID!
            $platform: String!
            $playerType: String!
            $skipPlayToken: Boolean!
            ) {
            ...VodPlayerWrapper_token
            }
            fragment VodPlayerWrapper_token on Query {
            video(id: $videoId) @skip(if: $skipPlayToken) {
                playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {
                    signature
                    value
                }
                id
                __typename
            }
        }`
                variables: {
                    "videoId": m.top.contentRequested.contentId
                    "platform": "web_tv"
                    "playerType": "pulsar"
                    "skipPlayToken": false
                }
            })
        end if

        if m.top.contentRequested.contentType = "LIVE"
            rsp = TwitchGraphQLRequest({
                query: `query StreamPlayer_Query(
            $login: String!
            $playerType: String!
            $platform: String!
            $skipPlayToken: Boolean!
            ) {
            ...StreamPlayer_token
            }

            fragment StreamPlayer_token on Query {
            user(login: $login) {
                login
                stream @skip(if: $skipPlayToken) {
                    playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {
                        signature
                        value
                    }
                    id
                    __typename
                }
                id
                __typename
            }
        }`
                variables: {
                    "login": m.top.contentRequested.streamerLogin
                    "platform": "web_tv"
                    "playerType": "roku"
                    "skipPlayToken": false
                }
            })
        end if

        if m.top.contentRequested.contentType = "VOD"
            usherUrl = "https://usher.ttvnw.net/vod/" + rsp.data.video.id + ".m3u8?playlist_include_framerate=true&allow_source=true&player_type=pulsar&player_backend=mediaplayer&reassignments_supported=true&nauth=" + rsp.data.video.playbackAccessToken.value.EncodeUri() + "&nauthsig=" + rsp.data.video.playbackAccessToken.signature + "&fast_bread=true&low_latency=true"
        else if m.top.contentRequested.contentType = "LIVE"
            usherUrl = "https://usher.ttvnw.net/api/channel/hls/" + rsp.data.user.login + ".m3u8?allow_source=true&fast_bread=true&low_latency=true&token=" + rsp.data.user.stream.playbackAccessToken.value.EncodeUriComponent() + "&sig=" + rsp.data.user.stream.playbackAccessToken.signature.EncodeUriComponent()
        end if

        req = HttpRequest({
            url: usherUrl
            headers: {
                "Accept": "*/*"
                "Origin": "https://android.tv.twitch.tv"
                "Referer": "https://android.tv.twitch.tv/"
            }
            method: "GET"
        })

        while true
            usher_rsp = req.send().getString()
            if usher_rsp <> invalid
                exit while
            end if
            sleep(10)
        end while

        list = usher_rsp.Split(chr(10))
        stream_objects = []
        for line = 2 to list.Count() - 1
            stream_info = list[line + 1].Split(",")
            streamobject = {}
            for info = 0 to stream_info.Count() - 1
                info_parsed = stream_info[info].Split("=")
                streamobject[info_parsed[0].replace("#EXT-X-STREAM-INF:", "")] = toString(info_parsed[1], true).replace(chr(34), "")
            end for
            streamobject["URL"] = list[line + 2]
            stream_objects.push(streamobject)
            line += 2
        end for

        stream_bitrates = []
        stream_urls = []
        stream_qualities = []
        stream_content_ids = []
        stream_sticky = []
        stream_formats = []
        streams = []
        metadata = []

        for each stream_item in stream_objects
            res = stream_item["RESOLUTION"].split("x")[1]
            if stream_item["VIDEO"] = "chunked"
                if stream_item["FRAME-RATE"] <> invalid
                    fps = stream_item["FRAME-RATE"].split(".")[0]
                end if
                value = res + "p"
                if fps <> invalid
                    value = value + fps + " (Source)"
                end if
            else
                value = stream_item["VIDEO"]
            end if
            if m.global?.supportedgraphicsresolution <> invalid
                if res.ToInt() > m.global.supportedgraphicsresolution
                    ? "Res Skip: "; res
                    continue for
                end if
            end if
            if res.ToInt() >= 720
                stream_qualities.push(true)
                stream_quality = true
            else
                stream_qualities.push(false)
                stream_quality = false
            end if
            stream_bitrates.push(Int(Val(stream_item["BANDWIDTH"])) / 1000)
            stream_sticky.push(false)
            stream_content_ids.push(value)
            stream_urls.push(stream_item["URL"])
            stream_formats.push("lhls")
            stream = {
                url: stream_item["URL"]
                stickyredirects: false
                quality: stream_quality
                contentid: value
                bitrate: Int(Val(stream_item["BANDWIDTH"])) / 1000
            }
            streams.push(stream)
            metadata.push(
            {
                QualityID: value
                Streams: [stream]
                StreamUrls: [stream_item["URL"]]
                StreamStickyHttpRedirects: [false]
                StreamQualities: [stream_quality]
                StreamContentIds: [value]
                StreamBitrates: [Int(Val(stream_item["BANDWIDTH"])) / 1000]
            }
            )
        end for

        metadata.unshift({
            QualityID: "Automatic"
            StreamBitrates: stream_bitrates
            streams: streams
            StreamUrls: stream_urls
            StreamQualities: stream_qualities
            StreamContentIDs: stream_content_ids
            StreamStickyHttpRedirects: stream_sticky
        })

        responseObj = []
        content = CreateObject("roSGNode", "TwitchContentNode")
        content.setFields(m.top.contentRequested)

        userQualityPreference = get_user_setting("playback.video.quality", "auto")

        if userQualityPreference = "highest"
            content.setFields(metadata[1])
        else if userQualityPreference = "auto"
            content.setFields(metadata[0])
        end if
        m.top.metadata = metadata
    end if
    m.top.response = content
end sub

' Function to handle playback position change and flush buffer periodically
sub onPlaybackPositionChanged()
    if m.video.currentPlaybackTime < m.video.duration - 10
        m.video.seekToLive()
        m.video.flushBuffer() ' Flush buffer to prevent delays
    end if
end sub

' Setup player with minimal buffer settings and periodic buffer flushing
sub setupPlayer()
    m.video.minBufferTime = 0
    m.video.startRate = 1.0
    m.video.maxRate = 1.0
    m.video.minBufferSize = 1000
    m.video.maxBufferSize = 3000
    m.video.observeField("currentPlaybackTime", "onPlaybackPositionChanged")
end sub